// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   ADMIN
//   CLIENT
//   SERVICE_PROVIDER
// }

// enum ReservationStatus {
//   PENDING
//   ACCEPTED
//   REJECTED
//   CANCELED
// }

// model User {
//   ID               Int            @id @default(autoincrement())
//   Nom              String
//   Prenom           String
//   Email            String         @unique
//   Num              Int
//   Role             Role
//   MotDePasse       String
//   Validation       Boolean        @default(false)
//   services         Service[]
//   reservations     Reservation[]
//   favoris          Favoris[]
//   paiements        Paiement[]
//   notifications    Notification[]
//   reviews          Review[]
//   resetToken       String?        @unique
//   resetTokenExpiry DateTime?
//   DateNaissance    String
//   Bio              String?
//   Image            String?
//   createdAt        DateTime       @default(now())
//   updatedAt        DateTime       @updatedAt
// }

// model Service {
//   ID           Int           @id @default(autoincrement())
//   Description  String
//   Prix         Float
//   DateDebut    String
//   DateFin      String
//   Titre        String
//   Image        String
//   Place        String
//   userId       Int
//   user         User          @relation(fields: [userId], references: [ID])
//   categorieId  Int
//   categorie    Categorie     @relation(fields: [categorieId], references: [ID])
//   reservations Reservation[]
//   favoris      Favoris[]
//   reviews      Review[]
// }

// model Reservation {
//   ID        Int               @id @default(autoincrement())
//   DATE      String
//   statut    ReservationStatus
//   userId    Int
//   user      User              @relation(fields: [userId], references: [ID])
//   serviceId Int
//   service   Service           @relation(fields: [serviceId], references: [ID])
//   reviews   Review[]
// }

// model Review {
//   id            Int          @id @default(autoincrement())
//   serviceId     Int
//   userId        Int
//   stars         Int
//   comment       String?
//   createdAt     DateTime     @default(now())
//   service       Service      @relation(fields: [serviceId], references: [ID]) // Enlever `map`
//   user          User         @relation(fields: [userId], references: [ID])
//   reservationId Int?
//   reservation   Reservation? @relation(fields: [reservationId], references: [ID])
// }

// model Notification {
//   id      Int    @id @default(autoincrement())
//   message String
//   userId  Int
//   user    User   @relation(fields: [userId], references: [ID])
// }

// model Favoris {
//   ID        Int     @id @default(autoincrement())
//   userId    Int
//   user      User    @relation(fields: [userId], references: [ID])
//   serviceId Int
//   service   Service @relation(fields: [serviceId], references: [ID])
// }

// model Categorie {
//   ID       Int       @id @default(autoincrement())
//   Nom      String
//   services Service[] @relation(onDelete: CASCADE)
// }

// model Paiement {
//   id        Int      @id @default(autoincrement())
//   stripeId  String   @unique
//   amount    Int
//   currency  String
//   email     String
//   status    String   @default("PENDING")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    Int
//   user      User     @relation(fields: [userId], references: [ID])
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
  SERVICE_PROVIDER
}

enum ReservationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

model User {
  ID               Int            @id @default(autoincrement())
  Nom              String
  Prenom           String
  Email            String         @unique
  Num              Int
  Role             Role
  MotDePasse       String
  Validation       Boolean        @default(false)
  services         Service[]
  reservations     Reservation[]
  favoris          Favoris[]
  paiements        Paiement[]
  notifications    Notification[]
  reviews          Review[]
  resetToken       String?        @unique
  resetTokenExpiry DateTime?
  DateNaissance    String
  Bio              String?
  Image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Service {
  ID           Int           @id @default(autoincrement())
  Description  String
  Prix         Float
  DateDebut    DateTime
  DateFin      DateTime
  Titre        String
  Image        String
  Place        String
  userId       Int
  user         User          @relation(fields: [userId], references: [ID])
  categorieId  Int
  categorie    Categorie     @relation(fields: [categorieId], references: [ID])
  reservations Reservation[]
  favoris      Favoris[]
  reviews      Review[]
  promotions   Promotion[]   @relation("ServicePromotions")
}

model Reservation {
  ID        Int               @id @default(autoincrement())
  DateDebut String?
  DateFin   String?
  statut    ReservationStatus
  userId    Int
  user      User              @relation(fields: [userId], references: [ID])
  serviceId Int
  service   Service           @relation(fields: [serviceId], references: [ID])
  reviews   Review[]
}

model Review {
  id            Int          @id @default(autoincrement())
  serviceId     Int
  userId        Int
  stars         Int
  comment       String?
  createdAt     DateTime     @default(now())
  service       Service      @relation(fields: [serviceId], references: [ID])
  user          User         @relation(fields: [userId], references: [ID])
  reservationId Int?
  reservation   Reservation? @relation(fields: [reservationId], references: [ID])
}

model Notification {
  id      Int    @id @default(autoincrement())
  message String
  userId  Int
  user    User   @relation(fields: [userId], references: [ID])
}

model Favoris {
  ID        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [ID])
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [ID])
}

model Promotion {
  id        Int      @id @default(autoincrement())
  discount  Float
  startDate String?
  endDate   String?
  isGlobal  Boolean  @default(false)
  serviceId Int?
  service   Service? @relation("ServicePromotions", fields: [serviceId], references: [ID])
}

model Categorie {
  ID       Int       @id @default(autoincrement())
  Nom      String
  services Service[]
}

model Paiement {
  id        Int      @id @default(autoincrement())
  stripeId  String   @unique
  amount    Int
  currency  String
  email     String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [ID])
}
